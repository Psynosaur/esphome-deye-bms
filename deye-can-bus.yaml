# YAML for ESPHome for Deye RW-M6.1/SE-G5.1Pro Batteries
# Not all messages are decoded.
# For both cells and PCS(summary) messages you'll need an ESP32 + MCP2515

esphome:
  name: "deye-pcs-can-bus"
  friendly_name: Deye Battery CAN

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0 # disable UART logger
  level: WARN

# Enable webserver
web_server:
  port: 80
  auth:
    username: admin
    password: !secret wifi_password
  version: 3
  log: true
  ota: false

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_deyecan

ota:
  - platform: esphome
    password: !secret ota_deyecan

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

spi:
  clk_pin: GPIO18 # Change to your wiring needs
  mosi_pin: GPIO23 # Change to your wiring needs
  miso_pin: GPIO19 # Change to your wiring needs

canbus:
###########################################################################################################
# This is for InterCAN (250KBPS), using MCP2515
###########################################################################################################
  - platform: mcp2515
    id: mcp2515_can
    cs_pin: GPIO17 # Change to your wiring needs
    can_id: 6
    bit_rate: 250KBPS
    # mode: LISTENONLY
    # clock: 8MHZ
    # use_extended_id: True
    on_frame: 

###########################################################################################################
# Pack 1: Cell voltages
###########################################################################################################

    - can_id: 0x02098001 
      use_extended_id: true
      then:
        - lambda: |-
            float high_cell = ((x[0] << 8) | x[1]) / 1000.0;
            id(pack_1_cell_high_voltage).publish_state(high_cell);
            int high_position = x[2];
            id(pack_1_cell_h).publish_state(std::to_string(high_position).c_str());
            float low_cell = ((x[3] << 8) | x[4]) / 1000.0;
            id(pack_1_cell_low_voltage).publish_state(low_cell);
            int low_position = x[5];
            id(pack_1_cell_l).publish_state(std::to_string(low_position).c_str());
    - can_id: 0x04008001
      use_extended_id: true
      then:
        - lambda: |-
            float cell_01 = ((x[0] << 8) | x[1]) / 1000.0;
            id(pack_1_cell_01_voltage).publish_state(cell_01);
            float cell_02 = ((x[2] << 8) | x[3]) / 1000.0;
            id(pack_1_cell_02_voltage).publish_state(cell_02);
            float cell_03 = ((x[4] << 8) | x[5]) / 1000.0;
            id(pack_1_cell_03_voltage).publish_state(cell_03);
            float cell_04 = ((x[6] << 8) | x[7]) / 1000.0;
            id(pack_1_cell_04_voltage).publish_state(cell_04);
    - can_id: 0x04018001
      use_extended_id: true
      then:
        - lambda: |-
            float cell_05 = ((x[0] << 8) | x[1]) / 1000.0;
            id(pack_1_cell_05_voltage).publish_state(cell_05);
            float cell_06 = ((x[2] << 8) | x[3]) / 1000.0;
            id(pack_1_cell_06_voltage).publish_state(cell_06);
            float cell_07 = ((x[4] << 8) | x[5]) / 1000.0;
            id(pack_1_cell_07_voltage).publish_state(cell_07);
            float cell_08 = ((x[6] << 8) | x[7]) / 1000.0;
            id(pack_1_cell_08_voltage).publish_state(cell_08);
    - can_id: 0x04028001
      use_extended_id: true
      then:
        - lambda: |-
            float cell_09 = ((x[0] << 8) | x[1]) / 1000.0;
            id(pack_1_cell_09_voltage).publish_state(cell_09);
            float cell_10 = ((x[2] << 8) | x[3]) / 1000.0;
            id(pack_1_cell_10_voltage).publish_state(cell_10);
            float cell_11 = ((x[4] << 8) | x[5]) / 1000.0;
            id(pack_1_cell_11_voltage).publish_state(cell_11);
            float cell_12 = ((x[6] << 8) | x[7]) / 1000.0;
            id(pack_1_cell_12_voltage).publish_state(cell_12);
    - can_id: 0x04038001
      use_extended_id: true
      then:
        - lambda: |-
            float cell_13 = ((x[0] << 8) | x[1]) / 1000.0;
            id(pack_1_cell_13_voltage).publish_state(cell_13);
            float cell_14 = ((x[2] << 8) | x[3]) / 1000.0;
            id(pack_1_cell_14_voltage).publish_state(cell_14);
            float cell_15 = ((x[4] << 8) | x[5]) / 1000.0;
            id(pack_1_cell_15_voltage).publish_state(cell_15);
            float cell_16 = ((x[6] << 8) | x[7]) / 1000.0;
            id(pack_1_cell_16_voltage).publish_state(cell_16);
    
###########################################################################################################
# Pack 2: Cell voltages
###########################################################################################################

    - can_id: 0x02098002
      use_extended_id: true
      then:
        - lambda: |-
            float high_cell = ((x[0] << 8) | x[1]) / 1000.0;
            id(pack_2_cell_high_voltage).publish_state(high_cell);
            int high_position = x[2];
            id(pack_2_cell_h).publish_state(std::to_string(high_position).c_str());
            float low_cell = ((x[3] << 8) | x[4]) / 1000.0;
            id(pack_2_cell_low_voltage).publish_state(low_cell);
            int low_position = x[5];
            id(pack_2_cell_l).publish_state(std::to_string(low_position).c_str());
    - can_id: 0x04008002
      use_extended_id: true
      then:
        - lambda: |-
            float cell_01 = ((x[0] << 8) | x[1]) / 1000.0;
            id(pack_2_cell_01_voltage).publish_state(cell_01);
            float cell_02 = ((x[2] << 8) | x[3]) / 1000.0;
            id(pack_2_cell_02_voltage).publish_state(cell_02);
            float cell_03 = ((x[4] << 8) | x[5]) / 1000.0;
            id(pack_2_cell_03_voltage).publish_state(cell_03);
            float cell_04 = ((x[6] << 8) | x[7]) / 1000.0;
            id(pack_2_cell_04_voltage).publish_state(cell_04);
    - can_id: 0x04018002
      use_extended_id: true
      then:
        - lambda: |-
            float cell_05 = ((x[0] << 8) | x[1]) / 1000.0;
            id(pack_2_cell_05_voltage).publish_state(cell_05);
            float cell_06 = ((x[2] << 8) | x[3]) / 1000.0;
            id(pack_2_cell_06_voltage).publish_state(cell_06);
            float cell_07 = ((x[4] << 8) | x[5]) / 1000.0;
            id(pack_2_cell_07_voltage).publish_state(cell_07);
            float cell_08 = ((x[6] << 8) | x[7]) / 1000.0;
            id(pack_2_cell_08_voltage).publish_state(cell_08);
    - can_id: 0x04028002
      use_extended_id: true
      then:
        - lambda: |-
            float cell_09 = ((x[0] << 8) | x[1]) / 1000.0;
            id(pack_2_cell_09_voltage).publish_state(cell_09);
            float cell_10 = ((x[2] << 8) | x[3]) / 1000.0;
            id(pack_2_cell_10_voltage).publish_state(cell_10);
            float cell_11 = ((x[4] << 8) | x[5]) / 1000.0;
            id(pack_2_cell_11_voltage).publish_state(cell_11);
            float cell_12 = ((x[6] << 8) | x[7]) / 1000.0;
            id(pack_2_cell_12_voltage).publish_state(cell_12);
    - can_id: 0x04038002
      use_extended_id: true
      then:
        - lambda: |-
            float cell_13 = ((x[0] << 8) | x[1]) / 1000.0;
            id(pack_2_cell_13_voltage).publish_state(cell_13);
            float cell_14 = ((x[2] << 8) | x[3]) / 1000.0;
            id(pack_2_cell_14_voltage).publish_state(cell_14);
            float cell_15 = ((x[4] << 8) | x[5]) / 1000.0;
            id(pack_2_cell_15_voltage).publish_state(cell_15);
            float cell_16 = ((x[6] << 8) | x[7]) / 1000.0;
            id(pack_2_cell_16_voltage).publish_state(cell_16);
            
###########################################################################################################
# This is for PCS CAN (500KBPS), using ESP32_CAN
###########################################################################################################            
  - platform: esp32_can
    id: pcs_can
    tx_pin: GPIO04 # CAN HIGH BLUE
    rx_pin: GPIO016 # CAN LOW LIGHT-BLUE
    can_id: 4
    bit_rate: 500KBPS
    on_frame:
#    - can_id:      0  # listen to all messages
#      can_id_mask: 0  

###########################################################################################################
# Top Computer - BMS
###########################################################################################################

    - can_id: 0x351
      then:
        - lambda: |-
            float u_max = ((x[1] << 8) | x[0]) / 10.0;
            id(battery_charge_voltage).publish_state(u_max);
            int i_charge = ((x[3] << 8) | x[2]) / 10;
            id(battery_charge_current_limit).publish_state(i_charge);
            int i_discharge = ((x[5] << 8) | x[4]) / 10;
            id(battery_discharge_current_limit).publish_state(i_discharge);
            float u_min = ((x[7] << 8) | x[6]) / 10.0;
            id(battery_discharge_voltage).publish_state(u_min);
          #  ESP_LOGI("canid 0x351:", "U_max: %.1f V, I_charge %d A, I_discharge: %d A, U_min %.1f V", u_max, i_charge, i_discharge, u_min );
    - can_id: 0x355
      then:
        - lambda: |-
            float soc = ((x[1] << 8) | x[0]);
            id(battery_soc).publish_state(soc);
            float soh = ((x[3] << 8) | x[2]);
            id(battery_soh).publish_state(soh);
          #  ESP_LOGI("canid 0x355:", "SoC %d %, SoH %d %",soc, soh );

    - can_id: 0x359
      then:
        - lambda: |- 
            id(cell_under_temperature_charge).publish_state(x[0] & 0x80);
            id(cell_over_temperature_charge).publish_state(x[0] & 0x40);
            id(discharge_over_current).publish_state(x[0] & 0x20); 
            id(charge_over_current).publish_state(x[0] & 0x10);
            id(module_under_voltage).publish_state(x[0] & 0x8);
            id(module_over_voltage).publish_state(x[0] & 0x4);
            id(cell_under_voltage).publish_state(x[0] & 0x2);
            id(cell_over_voltage).publish_state(x[0] & 0x1);
            
            id(heating_film_over_temperature).publish_state(x[1] & 0x20);
            id(mos_over_temperature).publish_state(x[1] & 0x10);
            id(cell_temperature_over_difference).publish_state(x[1] & 0x8);
            id(cell_voltage_over_difference).publish_state(x[1] & 0x4);
            id(cell_under_temperature_discharge).publish_state(x[1] & 0x2);
            id(cell_over_temperature_discharge).publish_state(x[1] & 0x1);
            
            id(master_address_repeat).publish_state(x[3] & 0x08);
            id(pcs_communication_fail).publish_state(x[3] & 0x40);
            id(internal_communication_fail).publish_state(x[3] & 0x20);
            id(eeprom_error).publish_state(x[3] & 0x10);
            id(mosfet_short_circuit).publish_state(x[3] & 0x8);
            id(temperature_sampling_fail).publish_state(x[3] & 0x4);
            id(cell_voltage_sampling_fail).publish_state(x[3] & 0x2); 
            id(afe_communication_fail).publish_state(x[3] & 0x1);
            
            id(cell_low_temperature_charge).publish_state(x[4] & 0x80);
            id(cell_high_temperature_charge).publish_state(x[4] & 0x40);
            id(discharge_high_current).publish_state(x[4] & 0x20); 
            id(charge_high_current).publish_state(x[4] & 0x10);
            id(module_low_voltage).publish_state(x[4] & 0x8);
            id(module_high_voltage).publish_state(x[4] & 0x4);
            id(cell_low_voltage).publish_state(x[4] & 0x2);
            id(cell_high_voltage).publish_state(x[4] & 0x1);
            
            id(heat_error).publish_state(x[5] & 0x80);
            id(heat_mos_adhession).publish_state(x[5] & 0x40);
            id(heating_film_high_temperature).publish_state(x[5] & 0x20);
            id(mos_high_temperature).publish_state(x[5] & 0x10);
            id(cell_temperature_high_difference).publish_state(x[5] & 0x8);
            id(cell_voltage_high_difference).publish_state(x[5] & 0x4);
            id(cell_low_temperature_discharge).publish_state(x[5] & 0x2);
            id(cell_high_temperature_discharge).publish_state(x[5] & 0x1);

    - can_id: 0x35e
      then:
        - lambda: |-
            int cap = ((x[7] << 8) | x[6]) / 10;
            id(total_capacity).publish_state(cap);
            //id(cell_manufacturer).publish_state("undifined");
            if(x[5] == 1) id(cell_manufacturer).publish_state("GOTION 96Ah");
            if(x[5] == 2) id(cell_manufacturer).publish_state("CATL 100Ah");
            if(x[5] == 3) id(cell_manufacturer).publish_state("EVE 100Ah");
            if(x[5] == 4) id(cell_manufacturer).publish_state("PH 100Ah");
            if(x[5] == 5) id(cell_manufacturer).publish_state("EVE 120Ah");
            if(x[5] == 6) id(cell_manufacturer).publish_state("PH 100Ah(214R)");
            if(x[5] == 7) id(cell_manufacturer).publish_state("ZENERGY 104Ah");
            //ESP_LOGI("canid 0x35E:", "%02x %02x %02x %02x %02x %02x %02x %02x", x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]); 

    - can_id: 0x35C
      then:
        - lambda: |-
            id(charging_allowed).publish_state(x[0] & 0x80);
            id(discharging_allowed).publish_state(x[0] & 0x40);
            id(request_force_charge_1).publish_state(x[0] & 0x20);
            id(request_force_charge_2).publish_state(x[0] & 0x10);
            id(request_full_charge).publish_state(x[0] & 0x08);
#            ESP_LOGI("canid 0x35C:", "%02x %02x %02x %02x %02x %02x %02x %02x", x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]); 

    - can_id: 0x356
      then:
        - lambda: |-
            float voltage = ((x[1] << 8) | x[0]) / 100.0;
            id(battery_voltage).publish_state(voltage);
            float current = ((x[3] << 8) | x[2]) / 10.0;
            if(x[3] > 0x80) current = uint16_t(~((x[3] << 8) | x[2]) + 1) / -10.0;
            id(battery_current).publish_state(current);
            float temperature = ((x[5] << 8) | x[4]) / 10;
            id(battery_temperature).publish_state(temperature);
          #  ESP_LOGI("canid 0x356:", "U: %.1f V, I: %.1f A, T: %.1f °C", voltage, current, temperature );
          #  if(x[3] > 0x80) current = uint16_t(~((x[3] << 8) | x[2]) + 1) / -10.0;

    - can_id: 0x361
      then:
        - lambda: |-
            float cell_u_max = ((x[1] << 8) | x[0]) / 1000.0;
            id(battery_max_cell_voltage_deye).publish_state(cell_u_max);
            float cell_u_min = ((x[3] << 8) | x[2]) / 1000.0;
            id(battery_min_cell_voltage_deye).publish_state(cell_u_min);
            float temp_max = ((x[5] << 8) | x[4]) / 10.0;
            id(battery_temp_max_deye).publish_state(temp_max);
            float temp_min = ((x[7] << 8) | x[6]) / 10.0;
            id(battery_temp_min_deye).publish_state(temp_min);

    - can_id: 0x364
      then:
        - lambda: |-
            id(module_amount_normal_state).publish_state(x[0]);
            id(module_amount_charge_disabled).publish_state(x[1]);
            id(module_amount_discharge_disabled).publish_state(x[2]);
            id(module_amount_communication_disconnected).publish_state(x[3]);
            id(module_amount).publish_state(x[4]);

    - can_id: 0x371
      then:
        - lambda: |-
            int i_charge = ((x[1] << 8) | x[0]) / 10;
            id(battery_charge_current_limit_deye).publish_state(i_charge);
            int i_discharge = ((x[3] << 8) | x[2]) / 10;
            id(battery_discharge_current_limit_deye).publish_state(i_discharge);

###########################################################################################################
# Pack 1: Frames
###########################################################################################################

    - can_id: 0x110
      then:
        - lambda: |-
            id(pack_1_heat_mos_state).publish_state(x[7] & 0x80);
            id(pack_1_precharge_mos_state).publish_state(x[7] & 0x40);
            id(pack_1_discharge_mos_state).publish_state(x[7] & 0x20);
            id(pack_1_charge_mos_state).publish_state(x[7] & 0x10);
            id(pack_1_parallel_finish).publish_state(x[7] & 0x1);

    - can_id: 0x150 
      then:
        - lambda: |-
            float voltage = ((x[1] << 8) | x[0]) / 10.0;
            id(pack_1_voltage).publish_state(voltage);
            float current = ((x[3] << 8) | x[2]) / 10.0;
            if(x[3] > 0x80) current = uint16_t(~((x[3] << 8) | x[2]) + 1) / -10.0;
            id(pack_1_current).publish_state(current);
            float soc = ((x[5] << 8) | x[4]) / 10.0;
            id(pack_1_soc).publish_state(soc);
            float soh = ((x[7] << 8) | x[6]) / 10.0;
            id(pack_1_soh).publish_state(soh);
          # ESP_LOGI("canid 0x150:", "U : %.1f V, I %.1f A, SoC: %.1f %, SoH %.1f %", voltage, current, soc, soh );

    - can_id: 0x200 
      then:
        - lambda: |-
            float cell_u_max = ((x[1] << 8) | x[0]) / 1000.0;
            id(pack_1_max_cell_voltage).publish_state(cell_u_max);
            float cell_u_min = ((x[3] << 8) | x[2]) / 1000.0;
            id(pack_1_min_cell_voltage).publish_state(cell_u_min);
            float temp_max = ((x[5] << 8) | x[4]) / 10.0;
            id(pack_1_temp_max).publish_state(temp_max);
            float temp_min = ((x[7] << 8) | x[6]) / 10.0;
            id(pack_1_temp_min).publish_state(temp_min);
          #  ESP_LOGI("canid 0x200:", "U cell max: %.3f V, U cell min %.3f V, Temp max: %.1f, T_min %.1f V", cell_u_max, cell_u_min, temp_max, temp_min );     

    - can_id: 0x250 
      then:
        - lambda: |-
            float mosmax = ((x[1] << 8) | x[0]) / 10.0;
            if(x[1] > 0x80) mosmax = uint16_t(~((x[1] << 8) | x[0]) + 1) / -10.0;
            id(pack_1_mosmax).publish_state(mosmax);
            float heatmem = (x[3] << 8) | x[2];
            if(x[3] > 0x80) heatmem = uint16_t(~((x[3] << 8) | x[2]) + 1) / -10.0;
            id(pack_1_heatmem).publish_state(heatmem);
            int val3 = ((x[5] << 8) | x[4]);
            id(pack_1_max_charge_current).publish_state(val3);
            int val4 = ((x[7] << 8) | x[6]);
            id(pack_1_max_discharge_current).publish_state(val4);
          # ESP_LOGI("canid 0x250:", "%.1f, %.1f, %d, %d", mosmax, heatmem, val3, val4 );

    - can_id: 0x400 
      then:
        - lambda: |-
            // Process frame 
            if(x[0] == 0) id(pack_1_operation_mode).publish_state("idle");
            if(x[0] == 1) id(pack_1_operation_mode).publish_state("charging");
            if(x[0] == 2) id(pack_1_operation_mode).publish_state("discharging");
            if(x[1] == 0) id(pack_1_fault_level).publish_state("no fault");
            if(x[1] == 1) id(pack_1_fault_level).publish_state("minor fault");
            if(x[1] == 2) id(pack_1_fault_level).publish_state("serious fault");
            float cycles = ((x[3] << 8) | x[2]);
            id(pack_1_cycles).publish_state(cycles);
            // Set cell balancing states based on x[4] and x[5]
            //for (int i = 1; i <= 8; i++) {
            //  std::to_string(high_position).c_str()
            //  id(pack_1_cell_ + i + _balancing).publish_state(x[4] & (1 << (i - 1)));
            //}
            //for (int i = 9; i <= 16; i++) {
            //  id(pack_1_cell_ + i + _balancing).publish_state(x[5] & (1 << (i - 9)));
            //}
            id(pack_1_cell_1_balancing).publish_state(x[4] & 0x1);
            id(pack_1_cell_2_balancing).publish_state(x[4] & 0x2);
            id(pack_1_cell_3_balancing).publish_state(x[4] & 0x4);
            id(pack_1_cell_4_balancing).publish_state(x[4] & 0x8);
            id(pack_1_cell_5_balancing).publish_state(x[4] & 0x10);
            id(pack_1_cell_6_balancing).publish_state(x[4] & 0x20);
            id(pack_1_cell_7_balancing).publish_state(x[4] & 0x40);
            id(pack_1_cell_8_balancing).publish_state(x[4] & 0x80);
            id(pack_1_cell_9_balancing).publish_state(x[5] & 0x1);
            id(pack_1_cell_10_balancing).publish_state(x[5] & 0x2);
            id(pack_1_cell_11_balancing).publish_state(x[5] & 0x4);
            id(pack_1_cell_12_balancing).publish_state(x[5] & 0x8);
            id(pack_1_cell_13_balancing).publish_state(x[5] & 0x10);
            id(pack_1_cell_14_balancing).publish_state(x[5] & 0x20);
            id(pack_1_cell_15_balancing).publish_state(x[5] & 0x40);
            id(pack_1_cell_16_balancing).publish_state(x[5] & 0x80);

    - can_id: 0x550
      then:
        - lambda: |-
            float charged = ((x[3] << 24) | (x[2] << 16) | (x[1] << 8) | x[0]) / 1000.0;
            id(pack_1_charged).publish_state(charged);
            float discharged = ((x[7] << 24) | (x[6] << 16) | (x[5] << 8) | x[5]) / 1000.0;
            id(pack_1_discharged).publish_state(discharged);
  #          ESP_LOGI("canid 0x550:", "%.3f kWh, %.3f kWh", charged, discharged );
  #          ESP_LOGI("canid 0x550:", "%02x %02x %02x %02x %02x %02x %02x %02x", x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7]);
           

    - can_id: 0x700
      then:
        - lambda: | # TODO: Keep value high, the values go to zero then to 7 then zero... ;/ 
            uint16_t cnt[4];
            cnt[0] = (x[1] << 8) | x[0];  // charge over voltage count
            cnt[1] = (x[3] << 8) | x[2];  // discharge under voltage count
            cnt[2] = (x[5] << 8) | x[4];  // short circuit count
            cnt[3] = (x[7] << 8) | x[6];  // MOS over temp count
            
            if (cnt[0] > 0) id(pack_1_charge_over_voltage_count).publish_state(cnt[0]);
            if (cnt[1] > 0) id(pack_1_discharge_under_voltage_count).publish_state(cnt[1]);
            if (cnt[2] > 0) id(pack_1_short_circuit_count).publish_state(cnt[2]);
            if (cnt[3] > 0) id(pack_1_mos_over_temp_count).publish_state(cnt[3]);
            
    - can_id: 0x750
      then:
        - lambda: |-
            id(pack_1_charge_over_current_count).publish_state((x[1] << 8) | x[0]);
            id(pack_1_discharge_over_current_count).publish_state((x[3] << 8) | x[2]);
            id(pack_1_charge_over_temp_count).publish_state((x[5] << 8) | x[4]);
            id(pack_1_discharge_over_temp_count).publish_state((x[7] << 8) | x[6]);

###########################################################################################################
# Pack 2: Frames
###########################################################################################################

    - can_id: 0x111
      then:
        - lambda: |-
            id(pack_2_heat_mos_state).publish_state(x[7] & 0x80);
            id(pack_2_precharge_mos_state).publish_state(x[7] & 0x40);
            id(pack_2_discharge_mos_state).publish_state(x[7] & 0x20);
            id(pack_2_charge_mos_state).publish_state(x[7] & 0x10);
            id(pack_2_parallel_finish).publish_state(x[7] & 0x1);
    
    - can_id: 0x151 
      then:
        - lambda: |-
            float voltage = ((x[1] << 8) | x[0]) / 10.0;
            id(pack_2_voltage).publish_state(voltage);
            float current = ((x[3] << 8) | x[2]) / 10.0;
            if(x[3] > 0x80) current = uint16_t(~((x[3] << 8) | x[2]) + 1) / -10.0;
            id(pack_2_current).publish_state(current);
            float soc = ((x[5] << 8) | x[4]) / 10.0;
            id(pack_2_soc).publish_state(soc);
            float soh = ((x[7] << 8) | x[6]) / 10.0;
            id(pack_2_soh).publish_state(soh);
          #  ESP_LOGI("canid 0x151:", "U : %.1f V, I %.1f A, SoC: %d %, SoH %d %", voltage, current, soc, soh );
 
    - can_id: 0x201 
      then:
        - lambda: |-
            float cell_u_max = ((x[1] << 8) | x[0]) / 1000.0;
            id(pack_2_max_cell_voltage).publish_state(cell_u_max);
            float cell_u_min = ((x[3] << 8) | x[2]) / 1000.0;
            id(pack_2_min_cell_voltage).publish_state(cell_u_min);
            float temp_max = ((x[5] << 8) | x[4]) / 10.0;
            id(pack_2_temp_max).publish_state(temp_max);
            float temp_min = ((x[7] << 8) | x[6]) / 10.0;
            id(pack_2_temp_min).publish_state(temp_min);  
    
    - can_id: 0x251 
      then:
        - lambda: |-
            float mosmax = ((x[1] << 8) | x[0]) / 10.0;
            if(x[1] > 0x80) mosmax = uint16_t(~((x[1] << 8) | x[0]) + 1) / -10.0;
            id(pack_2_mosmax).publish_state(mosmax);
            float heatmem = (x[3] << 8) | x[2];
            if(x[3] > 0x80) heatmem = uint16_t(~((x[3] << 8) | x[2]) + 1) / -10.0;
            id(pack_2_heatmem).publish_state(heatmem);
            int val3 = ((x[5] << 8) | x[4]);
            id(pack_2_max_charge_current).publish_state(val3);
            int val4 = ((x[7] << 8) | x[6]);
            id(pack_2_max_discharge_current).publish_state(val4);

    - can_id: 0x401
      then:
        - lambda: |-
            // Process frame
            if(x[0] == 0) id(pack_2_operation_mode).publish_state("idle");
            if(x[0] == 1) id(pack_2_operation_mode).publish_state("charging");
            if(x[0] == 2) id(pack_2_operation_mode).publish_state("discharging");
            if(x[1] == 0) id(pack_2_fault_level).publish_state("no fault");
            if(x[1] == 1) id(pack_2_fault_level).publish_state("minor fault");
            if(x[1] == 2) id(pack_2_fault_level).publish_state("serious fault");
            float cycles = ((x[3] << 8) | x[2]);
            id(pack_2_cycles).publish_state(cycles);
            id(pack_2_cell_1_balancing).publish_state(x[4] & 0x1);
            id(pack_2_cell_2_balancing).publish_state(x[4] & 0x2);
            id(pack_2_cell_3_balancing).publish_state(x[4] & 0x4);
            id(pack_2_cell_4_balancing).publish_state(x[4] & 0x8);
            id(pack_2_cell_5_balancing).publish_state(x[4] & 0x10);
            id(pack_2_cell_6_balancing).publish_state(x[4] & 0x20);
            id(pack_2_cell_7_balancing).publish_state(x[4] & 0x40);
            id(pack_2_cell_8_balancing).publish_state(x[4] & 0x80);
            id(pack_2_cell_9_balancing).publish_state(x[5] & 0x1);
            id(pack_2_cell_10_balancing).publish_state(x[5] & 0x2);
            id(pack_2_cell_11_balancing).publish_state(x[5] & 0x4);
            id(pack_2_cell_12_balancing).publish_state(x[5] & 0x8);
            id(pack_2_cell_13_balancing).publish_state(x[5] & 0x10);
            id(pack_2_cell_14_balancing).publish_state(x[5] & 0x20);
            id(pack_2_cell_15_balancing).publish_state(x[5] & 0x40);
            id(pack_2_cell_16_balancing).publish_state(x[5] & 0x80);
   
    - can_id: 0x551 
      then:
        - lambda: |-
            float charged = ((x[3] << 24) | (x[2] << 16) | (x[1] << 8) | x[0]) / 1000.0;
            id(pack_2_charged).publish_state(charged);
            float discharged = ((x[7] << 24) | (x[6] << 16) | (x[5] << 8) | x[5]) / 1000.0;
            id(pack_2_discharged).publish_state(discharged);
    
    - can_id: 0x701 
      then:
        - lambda: |-
            id(pack_2_charge_over_voltage_count).publish_state((x[1] << 8) | x[0]);
            id(pack_2_discharge_under_voltage_count).publish_state((x[3] << 8) | x[2]);
            id(pack_2_short_circuit_count).publish_state((x[5] << 8) | x[4]);
            id(pack_2_mos_over_temp_count).publish_state((x[7] << 8) | x[6]); 
    
    - can_id: 0x751 
      then:
        - lambda: |-
            id(pack_2_charge_over_current_count).publish_state((x[1] << 8) | x[0]);
            id(pack_2_discharge_over_current_count).publish_state((x[3] << 8) | x[2]);
            id(pack_2_charge_over_temp_count).publish_state((x[5] << 8) | x[4]);
            id(pack_2_discharge_over_temp_count).publish_state((x[7] << 8) | x[6]);
          
sensor:
  - platform: template
    name: "Module amount normal state"
    id: "module_amount_normal_state"
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Module amount charge disabled"
    id: "module_amount_charge_disabled"
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Module amount discharge disabled"
    id: "module_amount_discharge_disabled"
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Module amount communication disconnected"
    id: "module_amount_communication_disconnected"
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Module amount"
    id: "module_amount"
    state_class: 'measurement'
    accuracy_decimals: 0
  - platform: template
    name: "Battery voltage"
    id: "battery_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 2

  - platform: template
    name: "Battery current"
    id: "battery_current"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 2

  - platform: template
    name: "Battery temperature"
    id: "battery_temperature"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Battery charge voltage"
    id: "battery_charge_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 2    

  - platform: template
    name: "Battery discharge voltage"
    id: "battery_discharge_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 2   

  - platform: template
    name: "Battery charge current limit"
    id: "battery_charge_current_limit"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Battery discharge current limit"
    id: "battery_discharge_current_limit"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Battery SoC"
    id: "battery_soc"
    unit_of_measurement: '%'
    device_class: 'battery'
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Battery SoH"
    id: "battery_soh"
    unit_of_measurement: '%'
    device_class: 'battery'
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Total capacity"
    id: "total_capacity"
    unit_of_measurement: 'Ah'
    device_class: 'energy'
    state_class: 'total_increasing'
    accuracy_decimals: 0
      
            
#Deye battery specific    
  - platform: template
    name: "Battery max cell voltage"
    id: "battery_max_cell_voltage_deye"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3    

  - platform: template
    name: "Battery min cell voltage"
    id: "battery_min_cell_voltage_deye"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3

  - platform: template
    name: "Battery temp max"
    id: "battery_temp_max_deye"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Battery temp min"
    id: "battery_temp_min_deye"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Battery charge current limit"
    id: "battery_charge_current_limit_deye"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Battery discharge current limit"
    id: "battery_discharge_current_limit_deye"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 0

###########################################################################################################
# Pack 1: 
########################################################################################################### 

  - platform: template
    name: "Pack 1 charge over voltage count"
    id: "pack_1_charge_over_voltage_count"
    state_class: 'measurement'
    accuracy_decimals: 0   

  - platform: template
    name: "Pack 1 discharge under voltage count"
    id: "pack_1_discharge_under_voltage_count"
    state_class: 'measurement'
    accuracy_decimals: 0 

  - platform: template
    name: "Pack 1 short circuit count"
    id: "pack_1_short_circuit_count"
    state_class: 'measurement'
    accuracy_decimals: 0 
  
  - platform: template
    name: "Pack 1 mos over temp count"
    id: "pack_1_mos_over_temp_count"
    state_class: 'measurement'
    accuracy_decimals: 0 

  - platform: template
    name: "Pack 1 charge over voltage count"
    id: "pack_1_charge_over_current_count"
    state_class: 'measurement'
    accuracy_decimals: 0   

  - platform: template
    name: "Pack 1 discharge under voltage count"
    id: "pack_1_discharge_over_current_count"
    state_class: 'measurement'
    accuracy_decimals: 0 

  - platform: template
    name: "Pack 1 charge over temp count"
    id: "pack_1_charge_over_temp_count"
    state_class: 'measurement'
    accuracy_decimals: 0 
  
  - platform: template
    name: "Pack 1 discharge over temp count"
    id: "pack_1_discharge_over_temp_count"
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Pack 1 voltage"
    id: "pack_1_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 2   

  - platform: template
    name: "Pack 1 current"
    id: "pack_1_current"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 1 max charge current"
    id: "pack_1_max_charge_current"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 0
  
  - platform: template
    name: "Pack 1 max discharge current"
    id: "pack_1_max_discharge_current"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Pack 1 SoC"
    id: "pack_1_soc"
    unit_of_measurement: '%'
    device_class: 'battery'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 1 SoH"
    id: "pack_1_soh"
    unit_of_measurement: '%'
    device_class: 'battery'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 1 max cell voltage"
    id: "pack_1_max_cell_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3    

  - platform: template
    name: "Pack 1 min cell voltage"
    id: "pack_1_min_cell_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3
    on_value:
      then:
        - component.update: pack_1_imbalance 

  - platform: template
    name: "Pack 1 imbalance"
    id: "pack_1_imbalance"
    unit_of_measurement: 'mV'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 0 
    lambda: |-
      return ((id(pack_1_max_cell_voltage).state - id(pack_1_min_cell_voltage).state)) * 1000;

  - platform: template
    name: "Pack 1 temp max"
    id: "pack_1_temp_max"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 1 temp min"
    id: "pack_1_temp_min"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 1 MosMax"
    id: "pack_1_mosmax"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 1 HeatMem"
    id: "pack_1_heatmem"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 1 cycles"
    id: "pack_1_cycles"
    state_class: 'measurement'
    accuracy_decimals: 0  

  - platform: template
    name: "Pack 1 charged"
    id: "pack_1_charged"
    unit_of_measurement: 'kWh'
    device_class: 'energy'
    state_class: 'total_increasing'
    accuracy_decimals: 3
    filters:
      - throttle: 1s  

  - platform: template
    name: "Pack 1 discharged"
    id: "pack_1_discharged"
    unit_of_measurement: 'kWh'
    device_class: 'energy'
    state_class: 'total_increasing'
    accuracy_decimals: 3
    filters:
      - throttle: 1s  

###########################################################################################################
# Pack 1: Cell High and Lows
###########################################################################################################   

  - platform: template
    name: "Pack 1: Cell_high"
    id: "pack_1_cell_high_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_low"
    id: "pack_1_cell_low_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

###########################################################################################################
# Pack 1: Cell voltages
###########################################################################################################

  - platform: template
    name: "Pack 1: Cell_01"
    id: "pack_1_cell_01_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_02"
    id: "pack_1_cell_02_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_03"
    id: "pack_1_cell_03_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_04"
    id: "pack_1_cell_04_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_05"
    id: "pack_1_cell_05_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_06"
    id: "pack_1_cell_06_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_07"
    id: "pack_1_cell_07_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_08"
    id: "pack_1_cell_08_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_09"
    id: "pack_1_cell_09_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_10"
    id: "pack_1_cell_10_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_11"
    id: "pack_1_cell_11_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_12"
    id: "pack_1_cell_12_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_13"
    id: "pack_1_cell_13_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_14"
    id: "pack_1_cell_14_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_15"
    id: "pack_1_cell_15_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 1: Cell_16"
    id: "pack_1_cell_16_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 
    
###########################################################################################################
# Pack 2: 
###########################################################################################################  

  - platform: template
    name: "Pack 2 charge over voltage count"
    id: "pack_2_charge_over_voltage_count"
    state_class: 'measurement'
    accuracy_decimals: 0   

  - platform: template
    name: "Pack 2 discharge under voltage count"
    id: "pack_2_discharge_under_voltage_count"
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Pack 2 short circuit count"
    id: "pack_2_short_circuit_count"
    state_class: 'measurement'
    accuracy_decimals: 0 
  
  - platform: template
    name: "Pack 2 mos over temp count"
    id: "pack_2_mos_over_temp_count"
    state_class: 'measurement'
    accuracy_decimals: 0 

  - platform: template
    name: "Pack 2 charge over voltage count"
    id: "pack_2_charge_over_current_count"
    state_class: 'measurement'
    accuracy_decimals: 0   

  - platform: template
    name: "Pack 2 discharge under voltage count"
    id: "pack_2_discharge_over_current_count"
    state_class: 'measurement'
    accuracy_decimals: 0 

  - platform: template
    name: "Pack 2 charge over temp count"
    id: "pack_2_charge_over_temp_count"
    state_class: 'measurement'
    accuracy_decimals: 0 
  
  - platform: template
    name: "Pack 2 discharge over temp count"
    id: "pack_2_discharge_over_temp_count"
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Pack 2 voltage"
    id: "pack_2_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 2   

  - platform: template
    name: "Pack 2 current"
    id: "pack_2_current"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 2 max charge current"
    id: "pack_2_max_charge_current"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 0
  
  - platform: template
    name: "Pack 2 max discharge current"
    id: "pack_2_max_discharge_current"
    unit_of_measurement: 'A'
    device_class: 'current'
    state_class: 'measurement'
    accuracy_decimals: 0

  - platform: template
    name: "Pack 2 SoC"
    id: "pack_2_soc"
    unit_of_measurement: '%'
    device_class: 'battery'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 2 SoH"
    id: "pack_2_soh"
    unit_of_measurement: '%'
    device_class: 'battery'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 2 max cell voltage"
    id: "pack_2_max_cell_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3    

  - platform: template
    name: "Pack 2 min cell voltage"
    id: "pack_2_min_cell_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 
    on_value:
      then:
        - component.update: pack_2_imbalance 

  - platform: template
    name: "Pack 2 imbalance"
    id: "pack_2_imbalance"
    unit_of_measurement: 'mV'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 0 
    lambda: |-
      return ((id(pack_2_max_cell_voltage).state - id(pack_2_min_cell_voltage).state)) * 1000;

  - platform: template
    name: "Pack 2 temp max"
    id: "pack_2_temp_max"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 2 temp min"
    id: "pack_2_temp_min"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 2 MosMax"
    id: "pack_2_mosmax"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 2 HeatMem"
    id: "pack_2_heatmem"
    unit_of_measurement: '°C'
    device_class: 'temperature'
    state_class: 'measurement'
    accuracy_decimals: 1

  - platform: template
    name: "Pack 2 cycles"
    id: "pack_2_cycles"
    state_class: 'measurement'
    accuracy_decimals: 0 

  - platform: template
    name: "Pack 2 charged"
    id: "pack_2_charged"
    unit_of_measurement: 'kWh'
    device_class: 'energy'
    state_class: 'total_increasing'
    accuracy_decimals: 3
    filters:
      - throttle: 1s  

  - platform: template
    name: "Pack 2 discharged"
    id: "pack_2_discharged"
    unit_of_measurement: 'kWh'
    device_class: 'energy'
    state_class: 'total_increasing'
    accuracy_decimals: 3  
    filters:
      - throttle: 1s

###########################################################################################################
# Pack 2: Cell High and Lows
###########################################################################################################  

  - platform: template
    name: "Pack 2: Cell_high"
    id: "pack_2_cell_high_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_low"
    id: "pack_2_cell_low_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

###########################################################################################################
# Pack 2: Cell voltages
###########################################################################################################

  - platform: template
    name: "Pack 2: Cell_01"
    id: "pack_2_cell_01_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_02"
    id: "pack_2_cell_02_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_03"
    id: "pack_2_cell_03_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_04"
    id: "pack_2_cell_04_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_05"
    id: "pack_2_cell_05_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_06"
    id: "pack_2_cell_06_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_07"
    id: "pack_2_cell_07_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_08"
    id: "pack_2_cell_08_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_09"
    id: "pack_2_cell_09_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_10"
    id: "pack_2_cell_10_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_11"
    id: "pack_2_cell_11_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_12"
    id: "pack_2_cell_12_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_13"
    id: "pack_2_cell_13_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_14"
    id: "pack_2_cell_14_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_15"
    id: "pack_2_cell_15_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

  - platform: template
    name: "Pack 2: Cell_16"
    id: "pack_2_cell_16_voltage"
    unit_of_measurement: 'V'
    device_class: 'voltage'
    state_class: 'measurement'
    accuracy_decimals: 3 

###########################################################################################################
# Pack 1 and 2: Cell High and Lows
########################################################################################################### 
 
text_sensor:
  - platform: template
    name: "Cell manufacturer"
    id: "cell_manufacturer"

  - platform: template
    name: "Pack 1: Cell High"
    id: "pack_1_cell_h"

  - platform: template
    name: "Pack 1: Cell Low"
    id: "pack_1_cell_l"

  - platform: template
    name: "Pack 2: Cell High"
    id: "pack_2_cell_h"

  - platform: template
    name: "Pack 2: Cell Low"
    id: "pack_2_cell_l"
  
  - platform: template
    name: "Pack 1 operation mode"
    id: "pack_1_operation_mode"

  - platform: template
    name: "Pack 1 fault level"
    id: "pack_1_fault_level" 

  - platform: template
    name: "Pack 2 operation mode"
    id: "pack_2_operation_mode"

  - platform: template
    name: "Pack 2 fault level"
    id: "pack_2_fault_level"

###########################################################################################################
# Status sensors
########################################################################################################### 

binary_sensor:
  # 0x359

  - platform: template
    name: "Cell under temperature charge"
    id: "cell_under_temperature_charge"

  - platform: template
    name: "Cell over temperature charge"
    id: "cell_over_temperature_charge"

  - platform: template
    name: "Discharge over current"
    id: "discharge_over_current"

  - platform: template
    name: "Charge over current"
    id: "charge_over_current"

  - platform: template
    name: "Module under voltage"
    id: "module_under_voltage"

  - platform: template
    name: "Module over voltage"
    id: "module_over_voltage"

  - platform: template
    name: "Cell under voltage"
    id: "cell_under_voltage"

  - platform: template
    name: "Cell over voltage"
    id: "cell_over_voltage"

  - platform: template
    name: "Heating film over temperature"
    id: "heating_film_over_temperature"

  - platform: template
    name: "Mos over temperature"
    id: "mos_over_temperature"

  - platform: template
    name: "Cell temperature over difference"
    id: "cell_temperature_over_difference"

  - platform: template
    name: "Cell voltage over difference"
    id: "cell_voltage_over_difference"

  - platform: template
    name: "Cell under temperature discharge"
    id: "cell_under_temperature_discharge"

  - platform: template
    name: "Cell over temperature discharge"
    id: "cell_over_temperature_discharge"

  - platform: template
    name: "Master address_repeat"
    id: "master_address_repeat"

  - platform: template
    name: "PCS communication fail"
    id: "pcs_communication_fail"

  - platform: template
    name: "Internal communication fail"
    id: "internal_communication_fail"

  - platform: template
    name: "EEPROM error"
    id: "eeprom_error"

  - platform: template
    name: "Mosfet short circuit"
    id: "mosfet_short_circuit"            

  - platform: template
    name: "Temperature sampling fail"
    id: "temperature_sampling_fail"

  - platform: template
    name: "Cell voltage sampling fail"
    id: "cell_voltage_sampling_fail"

  - platform: template
    name: "AFE communication fail"
    id: "afe_communication_fail"  

  - platform: template
    name: "Cell low temperature charge"
    id: "cell_low_temperature_charge"

  - platform: template
    name: "Cell high temperature charge"
    id: "cell_high_temperature_charge"

  - platform: template
    name: "Discharge high current"
    id: "discharge_high_current"

  - platform: template
    name: "Charge high current"
    id: "charge_high_current"

  - platform: template
    name: "Module low voltage"
    id: "module_low_voltage"

  - platform: template
    name: "Module high voltage"
    id: "module_high_voltage"

  - platform: template
    name: "Cell low voltage"
    id: "cell_low_voltage"

  - platform: template
    name: "Cell high voltage"
    id: "cell_high_voltage"

  - platform: template
    name: "Heat error"
    id: "heat_error"

  - platform: template
    name: "Heat mosfet adhession"
    id: "heat_mos_adhession"

  - platform: template
    name: "Heating film high temperature"
    id: "heating_film_high_temperature"

  - platform: template
    name: "Mosfet high temperature"
    id: "mos_high_temperature"            

  - platform: template
    name: "Cell temperature high difference"
    id: "cell_temperature_high_difference"

  - platform: template
    name: "Cell voltage high difference"
    id: "cell_voltage_high_difference"

  - platform: template
    name: "Cell low temperature discharge"
    id: "cell_low_temperature_discharge"

  - platform: template
    name: "Cell high temperature discharge"
    id: "cell_high_temperature_discharge"       
    
  - platform: template
    name: "Pack 1 cell 01 balancing"
    id: "pack_1_cell_1_balancing"

  - platform: template
    name: "Pack 1 cell 02 balancing"
    id: "pack_1_cell_2_balancing"

  - platform: template
    name: "Pack 1 cell 03 balancing"
    id: "pack_1_cell_3_balancing"

  - platform: template
    name: "Pack 1 cell 04 balancing"
    id: "pack_1_cell_4_balancing"

  - platform: template
    name: "Pack 1 cell 05 balancing"
    id: "pack_1_cell_5_balancing"

  - platform: template
    name: "Pack 1 cell 06 balancing"
    id: "pack_1_cell_6_balancing"

  - platform: template
    name: "Pack 1 cell 07 balancing"
    id: "pack_1_cell_7_balancing"

  - platform: template
    name: "Pack 1 cell 08 balancing"
    id: "pack_1_cell_8_balancing"

  - platform: template
    name: "Pack 1 cell 09 balancing"
    id: "pack_1_cell_9_balancing"

  - platform: template
    name: "Pack 1 cell 10 balancing"
    id: "pack_1_cell_10_balancing"

  - platform: template
    name: "Pack 1 cell 11 balancing"
    id: "pack_1_cell_11_balancing"

  - platform: template
    name: "Pack 1 cell 12 balancing"
    id: "pack_1_cell_12_balancing"

  - platform: template
    name: "Pack 1 cell 13 balancing"
    id: "pack_1_cell_13_balancing"

  - platform: template
    name: "Pack 1 cell 14 balancing"
    id: "pack_1_cell_14_balancing"

  - platform: template
    name: "Pack 1 cell 15 balancing"
    id: "pack_1_cell_15_balancing"

  - platform: template
    name: "Pack 1 cell 16 balancing"
    id: "pack_1_cell_16_balancing"

  - platform: template
    name: "Pack 2 cell 01 balancing"
    id: "pack_2_cell_1_balancing"

  - platform: template
    name: "Pack 2 cell 02 balancing"
    id: "pack_2_cell_2_balancing"

  - platform: template
    name: "Pack 2 cell 03 balancing"
    id: "pack_2_cell_3_balancing"

  - platform: template
    name: "Pack 2 cell 04 balancing"
    id: "pack_2_cell_4_balancing"

  - platform: template
    name: "Pack 2 cell 05 balancing"
    id: "pack_2_cell_5_balancing"

  - platform: template
    name: "Pack 2 cell 06 balancing"
    id: "pack_2_cell_6_balancing"

  - platform: template
    name: "Pack 2 cell 07 balancing"
    id: "pack_2_cell_7_balancing"

  - platform: template
    name: "Pack 2 cell 08 balancing"
    id: "pack_2_cell_8_balancing"

  - platform: template
    name: "Pack 2 cell 09 balancing"
    id: "pack_2_cell_9_balancing"

  - platform: template
    name: "Pack 2 cell 10 balancing"
    id: "pack_2_cell_10_balancing"

  - platform: template
    name: "Pack 2 cell 11 balancing"
    id: "pack_2_cell_11_balancing"

  - platform: template
    name: "Pack 2 cell 12 balancing"
    id: "pack_2_cell_12_balancing"

  - platform: template
    name: "Pack 2 cell 13 balancing"
    id: "pack_2_cell_13_balancing"

  - platform: template
    name: "Pack 2 cell 14 balancing"
    id: "pack_2_cell_14_balancing"

  - platform: template
    name: "Pack 2 cell 15 balancing"
    id: "pack_2_cell_15_balancing"

  - platform: template
    name: "Pack 2 cell 16 balancing"
    id: "pack_2_cell_16_balancing"
# 0x35C byte 0
  - platform: template
    name: "Charging allowed"
    id: "charging_allowed"

  - platform: template
    name: "Discharging allowed"
    id: "discharging_allowed"   

  - platform: template
    name: "Request force charge 1"
    id: "request_force_charge_1"

  - platform: template
    name: "Request force charge 2"
    id: "request_force_charge_2"

  - platform: template
    name: "Request full charge"
    id: "request_full_charge"
# 0x110
  - platform: template
    name: "Pack 1 heat mos state"
    id: "pack_1_heat_mos_state"

  - platform: template
    name: "Pack 1 precharge mos state"
    id: "pack_1_precharge_mos_state"   

  - platform: template
    name: "Pack 1 discharge mos state"
    id: "pack_1_discharge_mos_state"

  - platform: template
    name: "Pack 1 charge mos state"
    id: "pack_1_charge_mos_state"

  - platform: template
    name: "Pack 1 parallel finish"
    id: "pack_1_parallel_finish"

# 0x111
  - platform: template
    name: "Pack 2 heat mos state"
    id: "pack_2_heat_mos_state"

  - platform: template
    name: "Pack 2 precharge mos state"
    id: "pack_2_precharge_mos_state"   

  - platform: template
    name: "Pack 2 discharge mos state"
    id: "pack_2_discharge_mos_state"

  - platform: template
    name: "Pack 2 charge mos state"
    id: "pack_2_charge_mos_state"

  - platform: template
    name: "Pack 2 parallel finish"
    id: "pack_2_parallel_finish"

###########################################################################################################
# CAN Senders
###########################################################################################################
switch:
  - platform: restart
    name: "Restart Deye CAN ESP32"
# switch:
#   - platform: template
#     id: "charge_discharge_off_button"
#     name: "Charge off / Discharge off"
#     device_class: switch
#     turn_on_action :
#     - logger.log: "Switch Turned On!"
#     - canbus.send:
#           data: [ 0x00 ]
#           canbus_id: pcs_can
#           can_id: 0x35C
#     turn_off_action :
#     - logger.log: "Switch Turned Off!"

#   - platform: template
#     id: "charge_discharge_on_button"
#     name: "Charge on / Discharge on"
#     device_class: switch
#     turn_on_action :
#     - logger.log: "Switch Turned On!"
#     - canbus.send:
#           data: [ 0xC0 ]
#           canbus_id: pcs_can
#           can_id: 0x35C
#     turn_off_action :
#     - logger.log: "Switch Turned Off!"

#   - platform: template
#     id: "charge_off_discharge_on_button"
#     name: "Charge off / Discharge on"
#     device_class: switch
#     turn_on_action :
#     - logger.log: "Switch Turned On!"
#     - canbus.send:
#           data: [ 0x40 ]
#           canbus_id: pcs_can
#           can_id: 0x35C
#     turn_off_action :
#     - logger.log: "Switch Turned Off!"

#   - platform: template
#     id: "charge_on_button"
#     name: "Charge on / Discharge off"
#     device_class: switch
#     turn_on_action :
#     - logger.log: "Switch Turned On!"
#     - canbus.send:
#           data: [ 0x80 ]
#           canbus_id: pcs_can
#           can_id: 0x35C
#     turn_off_action :
#     - logger.log: "Switch Turned Off!"

  